# lazy reading

#-----------------------------------------
# fzf
#-----------------------------------------
[[plugins]]
repo = 'junegunn/fzf'
on_path = ['.*']

[[plugins]]
repo = 'junegunn/fzf.vim'
on_path = ['.*']
hook_source = '''
" fzf itself setting
let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit',
  \ 'enter': 'tab split'}

" - Popup window (anchored to the bottom of the current window)
let g:fzf_layout = { 'window': { 'width': 1, 'height': 0.6, 'relative': v:true, 'yoffset': 1.0 } }

" Initialize configuration dictionary
let g:fzf_vim = {}

" [Buffers] Jump to the existing window if possible
let g:fzf_vim.buffers_jump = 1

" [[B]Commits] Customize the options used by 'git log':
let g:fzf_vim.commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

" [Tags] Command to generate tags file
let g:fzf_vim.tags_command = 'ctags -R'

" [Commands] --expect expression for directly executing the command
let g:fzf_vim.commands_expect = 'alt-enter,ctrl-x'

command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, {'options': ['--reverse', '--info=inline', '--preview', 'cat {}']}, <bang>0)
'''

# yankee
[[plugins]]
repo = 'n04ln/yankee.vim'
on_path = ['.*']
hook_source = '''
    let g:yankee_buf_list = ['"b', '"c', '"x', '"h', '"z']
    vnoremap <silent> Y :call yankee#yank()<CR>
    nnoremap <silent> P :call yankee#paste()<CR>
'''

#-----------------------------------------
# coc
#-----------------------------------------
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = '0'
on_path = ['.*']
hook_source = '''
source ~/.config/nvim/coc-setting.vim
'''

[[plugins]]
repo = 'kizza/actionmenu.nvim'
on_path = ['.*']
hook_source = '''
source ~/.config/nvim/actionmenu-setting.vim
nnoremap <silent> <Leader>s :call ActionMenuCodeActions()<CR>
'''

#-----------------------------------------
# insertion plugin
#-----------------------------------------
[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_path = ['.*']

[[plugins]]
repo = 'wellle/targets.vim'
on_path = ['.*']
merged = '0'

#-----------------------------------------
# whitespace
#-----------------------------------------
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_i = 1

#-----------------------------------------
# coloring color code
#-----------------------------------------
[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_i = 1
hook_source = '''
lua <<EOF
require'colorizer'.setup(
  filetypes= { "*" },
  options = {
    tailwind = true,
    mode = 'background'
  }
)
EOF
'''

#-----------------------------------------
# treesitter
#-----------------------------------------
[[plugins]] # treesitter
repo = 'nvim-treesitter/nvim-treesitter'
merged='0'
on_path = ['.*']
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = { "bash", "c", "css", "dockerfile", "go", "gomod", "html", "javascript", "json", "lua", "python", "regex", "ruby", "toml", "typescript", "yaml", "tsx"},
  highlight = {
    enable = true,
  },
  indent = {
    enable = true,
  },
}
EOF
'''

[[plugins]] # ()の色を変えてくれるやつ
repo = 'HiPhish/rainbow-delimiters.nvim'
on_path = ['.*']
merged = '0'
depends = ['nvim-treesitter']
hook_source = '''
let g:rainbow_delimiters = {
  \ 'highlight': [
     \ 'RainbowDelimiterRed',
     \ 'RainbowDelimiterYellow',
     \ 'RainbowDelimiterOrange',
     \ 'RainbowDelimiterViolet',
     \ 'RainbowDelimiterCyan',
  \ ]
\ }
'''

[[plugins]] # 今いる関数を表示してくれるやつ
repo = 'nvim-treesitter/nvim-treesitter-context'
on_path = ['.*']
merged = '0'
depends = ['nvim-treesitter']
hook_source = '''
lua <<EOF
require'treesitter-context'.setup {
  enable = true,
  line_numbers = true,
}
EOF
'''

# markdown
[[plugins]]
repo = 'godlygeek/tabular'
on_ft=['markdown']

[[plugins]]
repo = 'plasticboy/vim-markdown'
depends = ['tabular']
on_ft=['markdown']
merged = '0'
hook_add = '''
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_conceal = 0
'''
