# lazy reading

#-----------------------------------------
# fzf
#-----------------------------------------
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
on_path = ['.*']
hook_source = '''
    let g:fzf_action = { 'enter': 'tab split' }
    let g:fzf_buffers_jump = 1
    let g:fzf_tags_command = 'ctags -R ./.git/tags .'
    command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)
    command! -bang -nargs=* Rg
      \ call fzf#vim#grep(
      \   'rg --line-number --no-heading '.shellescape(<q-args>), 0,
      \   fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))
'''

# yankee
[[plugins]]
repo = 'n04ln/yankee.vim'
on_path = ['.*']
hook_source = '''
    let g:yankee_buf_list = ['"b', '"c', '"x', '"h', '"z']
    vnoremap <silent> Y :call yankee#yank()<CR>
    nnoremap <silent> P :call yankee#paste()<CR>
'''

#-----------------------------------------
# coc
#-----------------------------------------
[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merged = '0'
on_path = ['.*']
hook_source = '''
source ~/.config/nvim/coc-setting.vim
'''

[[plugins]]
repo = 'kizza/actionmenu.nvim'
hook_source = '''
source ~/.config/nvim/actionmenu-setting.vim
nnoremap <silent> <Leader>s :call ActionMenuCodeActions()<CR>
'''

#-----------------------------------------
# insertion plugin
#-----------------------------------------
[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'wellle/targets.vim'

#-----------------------------------------
# whitespace
#-----------------------------------------
[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_i = 1

#-----------------------------------------
# syntax
#-----------------------------------------

[[plugins]]
repo = 'elzr/vim-json'
on_i = 1
on_ft = 'json'
hook_source = '''
  let g:vim_json_syntax_conceal = 0
'''

# go
# [[plugins]]
# repo = 'fatih/vim-go'
# on_ft = ['go']
# hook_source = '''
#   let g:go_snippet_engine = "neosnippet"
#   let g:go_list_type = "quickfix"
#   let g:go_def_mapping_enabled = 0
#   let g:go_fmt_command = "goimports"
# '''

#-----------------------------------------
# ctags
#-----------------------------------------
# [[plugins]]
# repo = 'szw/vim-tags'
# hook_source = '''
#   nnoremap <C-]> g<C-]>
# '''

#-----------------------------------------
# neosnippet
#-----------------------------------------
# [[plugins]]
# repo = 'Shougo/neosnippet'
# hook_source = '''
#   imap <C-k> <Plug>(neosnippet_expand_or_jump)
#   smap <C-k> <Plug>(neosnippet_expand_or_jump)
#   xmap <C-k> <Plug>(neosnippet_expand_target)
#   if has('conceal')
#     set conceallevel=2 concealcursor=niv
#   endif
#   let g:neosnippet#enable_completed_snippet = 1
# '''
# on_i = 1
# on_ft = ['snippet']
# depends = ['neosnippet-snippets']

#-----------------------------------------
# deoplete
#-----------------------------------------

# deoplete
# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# hook_source = '''
#  let g:python_host_prog = expand('/User/yamagishiryu/.pyenv/versions/2.7.15/bin/python2.7')
#  let g:python3_host_prog= expand('~/.pyenv/versions/3.6.5/bin/python3.6')
#  let g:deoplete#enable_at_startup = 1
#  inoremap <silent><expr><tab> pumvisible() ? "\<c-n>" :
#    \ neosnippet#expandable_or_jumpable() ?
#    \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
# '''
# on_i = 1

# deoplete go
#[[plugins]]
#repo = 'deoplete-plugins/deoplete-go'
#on_ft = 'go'
#build = 'make'
#depends = ['deoplete.nvim']
#hook_source = '''
  #let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
  #let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
#'''

# deoplete rust
# [[plugins]]
# repo = 'sebastianmarkow/deoplete-rust'
# on_ft = 'rust'
# depends = ['deoplete.nvim']
# hook_source = '''
#     let g:deoplete#sources#rust#rust_source_path='{$(rustc --print sysroot)/lib/rustlib/src/rust/srcを書く}'
#     let g:deoplete#sources#rust#show_duplicates=1
#     let g:deoplete#sources#rust#disable_keymap=1
#     nmap <buffer> gd <plug>DeopleteRustGoToDefinitionDefault
#     nmap <buffer> K  <plug>DeopleteRustShowDocumentation
# '''

